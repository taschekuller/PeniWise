# Docker Compose for Production
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: peniwise-postgres-prod
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-peniwise}
      POSTGRES_USER: ${POSTGRES_USER:-peniwise}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - peniwise-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: peniwise-redis-prod
    restart: always
    volumes:
      - redis_data:/data
    networks:
      - peniwise-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: peniwise-backend-prod
    restart: always
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-peniwise}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-peniwise}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_SECURE=${SMTP_SECURE}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - SMTP_FROM=${SMTP_FROM}
    depends_on:
      - postgres
      - redis
    networks:
      - peniwise-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

volumes:
  postgres_data:
  redis_data:

networks:
  peniwise-network:
    driver: bridge
